Learning python
#Sustitución de valores en cadenas de carácteres
puntos = 100
mensaje = "se van a concatenar %s puntos"
print(mensaje %puntos)
se van a concatenar 100 puntos
#input
nombre = input("¿como te llamas?")
print("Hola, ", nombre) 

#Sustituyendo dos valores a la cadena

>>> mensaje2 = "¿que tienen los %s y los %s en comun?"
>>> print (mensaje2 %("perros","gatos"))
¿que tienen los perros y los gatos en comun?

#Listas en python
>>> lista_del_mandado = ['manzanas','papel','chocolate','cafe']
>>> print(lista_del_mandado[3])
cafe
>>> print(lista_del_mandado[0:3])
['manzanas', 'papel', 'chocolate']

 
# Agregar elementos a una lista con append('elemento')
>>> lista_del_mandado.append('leche')
>>> lista_del_mandado
['manzanas', 'papel', 'chocolate', 'cafe', 'leche']

#Insertar un elemento en determinada posición a la lista con insert(indice,'elemento')
>>> lista_del_mandado
['manzanas', 'royal', 'jabon', 'shampoo', 'papel', 'sugar']
>>> lista_del_mandado.insert(2,'croquetas')
>>> lista_del_mandado
['manzanas', 'royal', 'croquetas', 'jabon', 'shampoo', 'papel', 'sugar']


#Borrar elementos en una lista con del y pop('elemento')
>>> del  lista_del_mandado[2]
>>> lista_del_mandado
['manzanas', 'papel', 'cafe', 'leche']
>>> lista_del_mandado.pop(3) 
'leche'
#Si no se le asigna un indice al pop() borra el último elemento.

#tuplas sus elementos no se pueden modificar y sus valores nunca cambian

>>> otros_paises = ('cuba','argentina','brasil')
>>> otros_paises[1]= 'china'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
#Con LEN se pueden calcular el numero de elementos de una lista,tupla o cadena
#de caracteres.

>>> len(otros_paises)
3
>>> len('cuba')
4

#Diccionarios o Mapas comienzan con {'clave':'valor','clave':'valor'}

>> datos_personales = {'nombre':'Itzel','edad':'27','pais':'Mexico'}
>>> datos_personales
{'nombre': 'Itzel', 'edad': '27', 'pais': 'Mexico'}
>>> datos_personales['nombre']
'Itzel'
#Modificar un valor en un diccionario
>>> datos_personales['nombre']= 'itxhel'
>>> datos_personales['nombre']
'itxhel'

#SETS -Conjuntos-

>>> letras = set(['a','b','c','d','f'])
>>> letras
{'b', 'c', 'd', 'a', 'f'}
>>> vocales = set  (['a','e','i','o','u'])
>>> letras & vocales
{'a'}
>>> letras | vocales
{'b', 'c', 'i', 'd', 'e', 'a', 'o', 'f', 'u'}
>>> letras - vocales
{'b', 'f', 'd', 'c'}
>>> vocales - letras
{'u', 'e', 'o', 'i'}
>>> letas ^ vocales
{'b', 'o', 'i', 'c', 'u', 'f', 'd', 'e'}
>>> 

#Funciones

>>> def saludo():
...      print('Hola')
... 
>>> saludo()
Hola
>>> 


#Funciones internas en python

int() 
# convierte una cadena de caracteres a un numero entero
input()
#Obtiene la información de un usuario para usarla después
pop()
#Borra elementos de una lista


#Parámetros PENDING




#CONDICIONES
#IF & ELIF

ahorros = 50
#ahorros = input("¿Cuánto tienes ahorrado?")
#print("Tienes ahorrado , ", ahorros)
if ahorros > 300:
    print('comprar xbox')
elif ahorros > 100:
    print('tienes ahorrado %s , Ya casi' %ahorros )
elif ahorros > 200:
    print('Ya puedes comprar el xbox')
elif ahorros == 100:
    print("solo tenemos %s" %ahorros )
    print("sigue ahorrando más para el xbox")
else:
    print('Tenemos otra cantidad de dinero')

#con OR, una de las dos condiciones dadas tiene que ser
#verdadera
dia = "Martes"
if dia == "Lunes" or dia == "Martes":
       print("Apenas es %s" %dia )
# FOR
#FOR nos permite ejecutar varias veces una sentencia, oun bloque de sentencias.
# range sirve para crear un lista de números con secuencia
for x in range(0,5):
      print("Vamos a festejar")

print(list(range(10)))


#También se pueden utlizar Listas
>>> milista = ['Lunes','Martes','Miercoles','Jueves','Viernes']
>>> for x in milista:
...        print(x)
... 
Lunes
Martes
Miercoles
Jueves
Viernes

#BUCLES
#Con while, permite validar una condición, y si es verdadera la ejecuta,
# si es falsa nohace nada:

x=0
y=0
while x < 20 and y < 10:  #Primero evalua la codición
    print(x,y)  #Una vez evaluada la condición, ejecuta el bloque
    x= x + 1    # que sigue después de la sentencia while.
    y= y + 2
0 0
1 2
2 4
3 6
4 8  #Aqui regresa a ver si la ocndición es verdadera
     # Como aqui ya no cumple la condición, ya no ejecuta el bloque.

# Palabras reservadas: CONTINUE

x=0
y=0
while x < 20 and y < 10:   # Revisa la condición, si la cumple contínua con el siguiente bloque.
  if x == 2:               # Cuando cumpla esta condición, se ejecutara el bloque dentro de if 
      x = x + 1
      continue             # Una vez cumplida la condición, con continue python va al siguiente bloque
    
  print(x,y)
  x= x + 1
  y= y + 2

#CLASES Y HERENCIA

class Persona():
    def camina(self):
        print('caminando')
    def duerme(self):
        print('durmiendo')
    def come(self):
        print('comiendo')

class Hijo(Persona):
    def camina(self):
        print('Camina rapido')



#Manejo de archivos

1)Abrir
2)Leer o escribir
3)Cerrar

#Abrir archivos open() , nombre de archivo y W modo de escritura.

archivo = open("nombre.txt","w")

# Readline y Readlines
Leer una linea readline()

print("\nUsando Readline\n")
miArchivo = open("lista.txt")
print(miArchivo.readline())
print(miArchivo.readline())
print(miArchivo.readline())
miArchivo.close()

#Readlines  - Lee varias lineas y tener todas las lineas en una lista.
print("\nUsando ReadlineS\n")
miArchivo = open("lista.txt")
print(miArchivo.readlines())
miArchivo.close()   

#READ 
el metodo read acepta un parametro para indicar cuantos parametros quieres leer-

print("\nUsando Read\n")
miArchivo = open("lista.txt")
print(miArchivo.read(7))
miArchivo.close()


#Manejo de archivos  with, with es un manejador de contexto.
